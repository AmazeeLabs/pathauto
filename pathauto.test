<?php
// $Id$

/**
 * @file
 * Functionality tests for Pathauto.
 *
 * @ingroup pathauto
 */

/**
 * Helper test class with some added functions for testing.
 */
class PathautoUnitTestHelper extends DrupalWebTestCase {
  function setUp() {
    // Call parent::setUp() allowing test cases to pass further modules.
    $modules = func_get_args();
    $modules = array_merge(array('path', 'pathauto'), $modules);
    call_user_func_array(array($this, 'parent::setUp'), $modules);
  }

  function assertToken($type, $object, $token, $expected) {
    $tokens = token_generate($type, array($token => $token), array($type => $object));
    $tokens += array($token => '');
    $this->assertIdentical($tokens[$token], $expected, t("Token value for [@type:@token] was '!actual', expected value '!expected'.", array('@type' => $type, '@token' => $token, '!actual' => $tokens[$token], '!expected' => $expected)));
  }
}

/**
 * Unit tests for Pathauto functions.
 */
class PathautoUnitTestCase extends PathautoUnitTestHelper {
  public static function getInfo() {
    return array(
      'name' => 'Pathauto unit tests',
      'description' => 'Unit tests for Pathauto functions.',
      'group' => 'Pathauto',
    );
  }

  function setUp() {
    parent::setUp();
    module_load_include('inc', 'pathauto');
  }

  /**
   * Test _pathauto_get_schema_alias_maxlength().
   */
  function testGetSchemaAliasMaxLength() {
    $this->assertIdentical(_pathauto_get_schema_alias_maxlength(), 255);
  }

  /**
   * Test pathauto_pattern_load_by_entity().
   */
  function testPatternLoadByEntity() {
    variable_set('pathauto_node_story_en_pattern', ' story/en/[node:title] ');
    variable_set('pathauto_node_story_pattern', 'story/[node:title]');
    variable_set('pathauto_node_pattern', 'content/[node:title]');
    variable_set('pathauto_user_pattern', 'users/[user:name]');

    $tests = array(
      array('entity' => 'node', 'bundle' => 'story', 'language' => 'fr', 'expected' => 'story/[node:title]'),
      array('entity' => 'node', 'bundle' => 'story', 'language' => 'en', 'expected' => 'story/en/[node:title]'),
      array('entity' => 'node', 'bundle' => 'story', 'language' => LANGUAGE_NONE, 'expected' => 'story/[node:title]'),
      array('entity' => 'node', 'bundle' => 'page', 'language' => 'en', 'expected' => 'content/[node:title]'),
      array('entity' => 'user', 'bundle' => 'user', 'language' => LANGUAGE_NONE, 'expected' => 'users/[user:name]'),
      array('entity' => 'invalid-entity', 'bundle' => '', 'language' => LANGUAGE_NONE, 'expected' => ''),
    );
    foreach ($tests as $test) {
      $actual = pathauto_pattern_load_by_entity($test['entity'], $test['bundle'], $test['language']);
      $this->assertIdentical($actual, $test['expected'], t("pathauto_pattern_load_by_entity('@entity', '@bundle', '@language') returned '@actual', expected '@expected'", array('@entity' => $test['entity'], '@bundle' => $test['bundle'], '@language' => $test['language'], '@actual' => $actual, '@expected' => $test['expected'])));
    }
  }
}

/**
 * Helper test class with some added functions for testing.
 */
class PathautoTestHelper extends DrupalWebTestCase {
  protected $admin_user;

  function setUp() {
    // Call parent::setUp() allowing test cases to pass further modules.
    $modules = func_get_args();
    $modules = array_merge(array('path', 'pathauto'), $modules);
    call_user_func_array(array($this, 'parent::setUp'), $modules);

    // Set pathauto settings we assume to be as-is in this test.
    variable_set('pathauto_node_page_pattern', 'content/[node:title]');

    $this->admin_user = $this->drupalCreateUser(array(
      'administer pathauto',
      'administer url aliases',
      'create url aliases',
      'administer nodes',
      'bypass node access',
      'access content overview',
      'administer users',
    ));

    $this->drupalLogin($this->admin_user);
  }

  function assertEntityAlias($entity_type, $entity, $expected_alias) {
    $path = entity_uri($entity_type, $entity);
    drupal_clear_path_cache($path['path']);
    $alias = drupal_get_path_alias($path['path']);
    $this->assertIdentical($alias, $expected_alias);
  }
}

/**
 * Test basic pathauto functionality.
 */
class PathautoFunctionalTestCase extends PathautoTestHelper {
  public static function getInfo() {
    return array(
      'name' => 'Pathauto basic tests',
      'description' => 'Test basic pathauto functionality.',
      'group' => 'Pathauto',
    );
  }

  /**
   * Basic functional testing of Pathauto.
   */
  function testNodeEditing() {
    // Create node for testing.
    $random_title = $this->randomName(10);
    $title = ' Simpletest title ' . $random_title . ' [';
    $automatic_alias = 'content/simpletest-title-' . strtolower($random_title);
    $node = $this->drupalCreateNode(array('title' => $title, 'type' => 'page'));

    // Look for alias generated in the form.
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertFieldChecked('edit-path-pathauto-perform-alias');
    $this->assertFieldByName('path[alias]', $automatic_alias, 'Proper automated alias generated.');

    // Check whether the alias actually works.
    $this->drupalGet($automatic_alias);
    $this->assertText($title, 'Node accessible through automatic alias.');

    // Manually set the node's alias.
    $manual_alias = 'content/' . $node->nid;
    $edit = array(
      'path[pathauto_perform_alias]' => FALSE,
      'path[alias]' => $manual_alias,
    );
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    $this->assertText(t('@type @title has been updated', array('@type' => 'Basic page', '@title' => $title)));

    // Check that the automatic alias checkbox is now unchecked by default.
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertNoFieldChecked('edit-path-pathauto-perform-alias');
    $this->assertFieldByName('path[alias]', $manual_alias);

    // Submit the node form with the default values.
    $this->drupalPost(NULL, array(), t('Save'));
    $this->assertText(t('@type @title has been updated', array('@type' => 'Basic page', '@title' => $title)));

    // Test that the old (automatic) alias has been deleted and only accessible
    // through the new (manual) alias.
    $this->drupalGet($automatic_alias);
    $this->assertResponse(404, 'Node not accessible through automatic alias.');
    $this->drupalGet($manual_alias);
    $this->assertText($title, 'Node accessible through manual alias.');
  }

  /**
   * Test node operations.
   */
  function testNodeOperations() {
    $node1 = $this->drupalCreateNode(array('title' => 'node1'));
    $node2 = $this->drupalCreateNode(array('title' => 'node2'));

    // Delete all current URL aliases.
    db_delete('url_alias')->execute();

    $edit = array(
      'operation' => 'pathauto_update_alias',
      "nodes[{$node1->nid}]" => TRUE,
    );
    $this->drupalPost('admin/content', $edit, t('Update'));
    $this->assertText('Updated URL alias for 1 node.');

    $this->assertEntityAlias('node', $node1, 'content/' . $node1->title);
    $this->assertEntityAlias('node', $node2, 'node/' . $node2->nid);
  }

  /**
   * Test user operations.
   */
  function testUserOperations() {
    $account = $this->drupalCreateUser();

    // Delete all current URL aliases.
    db_delete('url_alias')->execute();

    $edit = array(
      'operation' => 'pathauto_update_alias',
      "accounts[{$account->uid}]" => TRUE,
    );
    $this->drupalPost('admin/people', $edit, t('Update'));
    $this->assertText('Updated URL alias for 1 user account.');

    $this->assertEntityAlias('user', $account, 'users/' . drupal_strtolower($account->name));
    $this->assertEntityAlias('user', $this->admin_user, 'user/' . $this->admin_user->uid);
  }

  function testSettingsValidation() {
    $edit = array();
    $edit['pathauto_max_length'] = 'abc';
    $edit['pathauto_max_component_length'] = 'abc';
    $this->drupalPost('admin/config/search/path/settings', $edit, 'Save configuration');
    $this->assertText('The field Maximum alias length is not a valid number.');
    $this->assertText('The field Maximum component length is not a valid number.');
    $this->assertNoText('The configuration options have been saved.');

    $edit['pathauto_max_length'] = '0';
    $edit['pathauto_max_component_length'] = '0';
    $this->drupalPost('admin/config/search/path/settings', $edit, 'Save configuration');
    $this->assertText('The field Maximum alias length cannot be less than 1.');
    $this->assertText('The field Maximum component length cannot be less than 1.');
    $this->assertNoText('The configuration options have been saved.');

    $edit['pathauto_max_length'] = '999';
    $edit['pathauto_max_component_length'] = '999';
    $this->drupalPost('admin/config/search/path/settings', $edit, 'Save configuration');
    $this->assertText('The field Maximum alias length cannot be greater than 255.');
    $this->assertText('The field Maximum component length cannot be greater than 255.');
    $this->assertNoText('The configuration options have been saved.');

    $edit['pathauto_max_length'] = '50';
    $edit['pathauto_max_component_length'] = '50';
    $this->drupalPost('admin/config/search/path/settings', $edit, 'Save configuration');
    $this->assertText('The configuration options have been saved.');
  }

  function testPatternsValidation() {
    $edit = array();
    $edit['pathauto_node_pattern'] = '[node:title]/[user:name]/[term:name]';
    $this->drupalPost('admin/config/search/path/patterns', $edit, 'Save configuration');
    $this->assertText('The Default path pattern (applies to all node types with blank patterns below) is using the following invalid tokens: [user:name], [term:name].');
    $this->assertNoText('The configuration options have been saved.');
  }
}

/*
 * Unit tests for the book tokens provided by Pathauto.
 */
class PathautoBookTokenTestCase extends PathautoUnitTestHelper {
  public static function getInfo() {
    return array(
      'name' => 'Pathauto book tokens',
      'description' => 'Unit tests for the book tokens provided by Pathauto.',
      'group' => 'Pathauto',
    );
  }

  function setUp() {
    parent::setUp('book');
    variable_set('book_allowed_types', array('book', 'page'));
    variable_set('pathauto_node_book_pattern', '[node:bookpathalias]/[node:title]');
  }

  function testBookPathAlias() {
    // Add a non-book node.
    $non_book_node = $this->drupalCreateNode(array('type' => 'book'));
    $this->assertToken('node', $non_book_node, 'bookpathalias', '');

    // Add a root book page.
    $parent_node = $this->drupalCreateNode(array('type' => 'book', 'title' => 'Root', 'book' => array('bid' => 'new')));
    $this->assertToken('node', $parent_node, 'bookpathalias', '');

    // Add a first child page.
    $child_node1 = $this->drupalCreateNode(array('type' => 'book', 'title' => 'Sub page1', 'book' => array('bid' => $parent_node->book['bid'], 'plid' => $parent_node->book['mlid'])));
    $this->assertToken('node', $child_node1, 'bookpathalias', 'root');

    // Add a second child page.
    $child_node2 = $this->drupalCreateNode(array('type' => 'book', 'title' => 'Sub page2', 'book' => array('bid' => $parent_node->book['bid'], 'plid' => $parent_node->book['mlid'])));
    $this->assertToken('node', $child_node2, 'bookpathalias', 'root');

    // Add a child page on an existing child page.
    $sub_child_node1 = $this->drupalCreateNode(array('type' => 'book', 'title' => 'Sub-sub Page1', 'book' => array('bid' => $parent_node->book['bid'], 'plid' => $child_node1->book['mlid'])));
    $this->assertToken('node', $sub_child_node1, 'bookpathalias', 'root/sub-page1');
  }
}

/*
 * Unit tests for the taxonomy tokens provided by Pathauto.
 */
class PathautoTaxonomyTokenTestCase extends PathautoUnitTestHelper {
  protected $vocab;

  public static function getInfo() {
    return array(
      'name' => 'Pathauto taxonomy tokens',
      'description' => 'Unit tests for the taxonomy tokens provided by Pathauto.',
      'group' => 'Pathauto',
    );
  }

  function setUp() {
    parent::setUp('taxonomy');
    variable_set('pathauto_taxonomy_pattern', 'category/[term:vocabulary]/[term:name]');
    // Use the default 'Tags' taxonomy included with the standard install profile.
    $tags_vid = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE name = 'Tags'")->fetchField();
    $this->vocab = taxonomy_vocabulary_load($tags_vid);
    $this->vocab->name = 'tags';
  }

  /**
   * Test the [term:path] and [term:alias] tokens.
   */
  function testCatTokens() {
    $term1 = $this->addTerm($this->vocab);
    $this->assertToken('term', $term1, 'path', $term1->name);
    $this->assertToken('term', $term1, 'alias', "category/{$this->vocab->name}/{$term1->name}");

    $term2 = $this->addTerm($this->vocab, array('parent' => $term1->tid));
    $this->assertToken('term', $term2, 'path', "{$term1->name}/{$term2->name}");
    $this->assertToken('term', $term2, 'alias', "category/{$this->vocab->name}/{$term2->name}");

    $term3 = $this->addTerm($this->vocab, array('parent' => $term2->tid, 'name' => ' foo/bar fer|zle '));
    $this->assertToken('term', $term3, 'path', "{$term1->name}/{$term2->name}/foobar-ferzle");
    $this->assertToken('term', $term3, 'alias', "category/{$this->vocab->name}/foobar-ferzle");
  }

  /**
   * Test the [node:term-lowest:path] token.
   */
  function testTermTokens() {
    $term1 = $this->addTerm($this->vocab, array('weight' => 5));
    $term2 = $this->addTerm($this->vocab, array('weight' => -5));
    $term3 = $this->addTerm($this->vocab, array('weight' => 0));

    $node = $this->drupalCreateNode(array(
      'type' => 'article',
      'taxonomy_tags' => array(LANGUAGE_NONE => array(
        $term1->tid,
        $term2->tid,
        $term3->tid,
      )),
    ));

    $this->assertToken('node', $node, 'term-lowest:path', $term2->name);
    $this->assertToken('node', $node, 'term-lowest:alias', "category/{$this->vocab->name}/{$term2->name}");
  }

  function addVocabulary(array $vocabulary = array()) {
    $vocabulary += array(
      'name' => drupal_strtolower($this->randomName(5)),
      'nodes' => array('article' => 'article'),
    );
    $vocabulary = (object) $vocabulary;
    taxonomy_vocabulary_save($vocabulary);
    return $vocabulary;
  }

  function addTerm(stdClass $vocabulary, array $term = array()) {
    $term += array(
      'name' => drupal_strtolower($this->randomName(5)),
      'vid' => $vocabulary->vid,
    );
    $term = (object) $term;
    taxonomy_term_save($term);
    return $term;
  }
}
