<?php
// $Id$

/**
 * @file
 * Functionality tests for Pathauto.
 *
 * @ingroup pathauto
 */

/**
 * Helper test class with some added functions for testing.
 */
class PathautoUnitTestHelper extends DrupalWebTestCase {
  function setUp() {
    $args = func_get_args();

    // Call parent::setUp() allowing test cases to pass further modules.
    $modules = array('path', 'token', 'pathauto');
    if (isset($args[0]) && is_array($args[0])) {
      $modules = array_merge($modules, $args[0]);
    }
    parent::setUp($modules);
  }

  function assertToken($type, $object, $token, $expected) {
    $tokens = token_generate($type, array($token => $token), array($type => $object));
    $tokens += array($token => '');
    $this->assertIdentical($tokens[$token], $expected, t("Token value for [@type:@token] was '@actual', expected value '@expected'.", array('@type' => $type, '@token' => $token, '@actual' => $tokens[$token], '@expected' => $expected)));
  }
}

/**
 * Unit tests for Pathauto functions.
 */
class PathautoUnitTestCase extends PathautoUnitTestHelper {
  public static function getInfo() {
    return array(
      'name' => 'Pathauto unit tests',
      'description' => 'Unit tests for Pathauto functions.',
      'group' => 'Pathauto',
    );
  }

  function setUp() {
    parent::setUp();
    module_load_include('inc', 'pathauto');
  }

  /**
   * Test _pathauto_get_schema_alias_maxlength().
   */
  function testGetSchemaAliasMaxLength() {
    $this->assertIdentical(_pathauto_get_schema_alias_maxlength(), 255);
  }

  /**
   * Test pathauto_pattern_load_by_entity().
   */
  function testPatternLoadByEntity() {
    variable_set('pathauto_node_story_en_pattern', ' story/en/[node:title] ');
    variable_set('pathauto_node_story_pattern', 'story/[node:title]');
    variable_set('pathauto_node_pattern', 'content/[node:title]');
    variable_set('pathauto_user_pattern', 'users/[user:name]');

    $tests = array(
      array('entity' => 'node', 'bundle' => 'story', 'language' => 'fr', 'expected' => 'story/[node:title]'),
      array('entity' => 'node', 'bundle' => 'story', 'language' => 'en', 'expected' => 'story/en/[node:title]'),
      array('entity' => 'node', 'bundle' => 'story', 'language' => LANGUAGE_NONE, 'expected' => 'story/[node:title]'),
      array('entity' => 'node', 'bundle' => 'page', 'language' => 'en', 'expected' => 'content/[node:title]'),
      array('entity' => 'user', 'bundle' => 'user', 'language' => LANGUAGE_NONE, 'expected' => 'users/[user:name]'),
      array('entity' => 'invalid-entity', 'bundle' => '', 'language' => LANGUAGE_NONE, 'expected' => ''),
    );
    foreach ($tests as $test) {
      $actual = pathauto_pattern_load_by_entity($test['entity'], $test['bundle'], $test['language']);
      $this->assertIdentical($actual, $test['expected'], t("pathauto_pattern_load_by_entity('@entity', '@bundle', '@language') returned '@actual', expected '@expected'", array('@entity' => $test['entity'], '@bundle' => $test['bundle'], '@language' => $test['language'], '@actual' => $actual, '@expected' => $test['expected'])));
    }
  }

  /**
   * Test pathauto_cleanstring().
   */
  function testCleanString() {
    $tests = array();
    variable_set('pathauto_ignore_words', ', in, is,that, the  , this, with, ');
    variable_set('pathauto_max_component_length', 20);

    // Test the 'ignored words' removal.
    $tests['this'] = 'this';
    $tests['this with that'] = 'this-with-that';
    $tests['this thing with that thing'] = 'thing-thing';

    // Test length truncation and duplicate separator removal.
    $tests[' - Pathauto is the greatest - module ever in Drupal history - '] = 'pathauto-greatest';

    foreach ($tests as $input => $expected) {
      $output = pathauto_cleanstring($input);
      $this->assertEqual($output, $expected, t("pathauto_cleanstring('@input') expected '@expected', actual '@output'", array('@input' => $input, '@expected' => $expected, '@output' => $output)));
    }
  }
}

/**
 * Helper test class with some added functions for testing.
 */
class PathautoTestHelper extends DrupalWebTestCase {
  protected $admin_user;

  function setUp() {
    $args = func_get_args();

    // Call parent::setUp() allowing test cases to pass further modules.
    $modules = array('path', 'token', 'pathauto');
    if (isset($args[0]) && is_array($args[0])) {
      $modules = array_merge($modules, $args[0]);
    }
    parent::setUp($modules);

    // Set pathauto settings we assume to be as-is in this test.
    variable_set('pathauto_node_page_pattern', 'content/[node:title]');

    // Allow other modules to add additional permissions for the admin user.
    $permissions = array(
      'administer pathauto',
      'administer url aliases',
      'create url aliases',
      'administer nodes',
      'bypass node access',
      'access content overview',
      'administer users',
    );
    if (isset($args[1]) && is_array($args[1])) {
      $permissions = array_merge($permissions, $args[1]);
    }
    $this->admin_user = $this->drupalCreateUser($permissions);

    $this->drupalLogin($this->admin_user);
  }

  function saveAlias($source, $alias, $language = LANGUAGE_NONE) {
    $alias = array(
      'source' => $source,
      'alias' => $alias,
      'language' => $language,
    );
    path_save($alias);
    return $alias;
  }

  function saveEntityAlias($entity_type, $entity, $alias, $language = LANGUAGE_NONE) {
    $uri = entity_uri($entity_type, $entity);
    return $this->saveAlias($uri['path'], $alias, $language);
  }

  function assertEntityAlias($entity_type, $entity, $expected_alias, $language = LANGUAGE_NONE) {
    $uri = entity_uri($entity_type, $entity);
    $this->assertAlias($uri['path'], $expected_alias, $language);
  }

  function assertNoEntityAlias($entity_type, $entity, $expected_alias, $langauge = LANGAUGE_NONE) {
    $uri = entity_uri($entity_type, $entity);
    $this->assertEntityAlias($entity_type, $entity, $uri['path'], $language);
  }

  function assertAlias($source, $expected_alias, $language = '') {
    $alias = drupal_get_path_alias($source, $language);
    $this->assertIdentical($alias, $expected_alias, t("Alias for %source with language '@language' was %actual, expected %expected.", array('%source' => $source, '%actual' => $alias, '%expected' => $expected_alias, '@language' => $language)));
  }

  function assertAliasExists($conditions) {
    $alias = path_load($conditions);
    $this->assertTrue($alias, t('Alias with conditions @conditions found.', array('@conditions' => var_export($conditions, TRUE))));
  }

  function assertNoAliasExists($conditions) {
    $alias = path_load($conditions);
    $this->assertFalse($alias, t('Alias with conditions @conditions not found.', array('@conditions' => var_export($conditions, TRUE))));
  }
}

/**
 * Test basic pathauto functionality.
 */
class PathautoFunctionalTestCase extends PathautoTestHelper {
  public static function getInfo() {
    return array(
      'name' => 'Pathauto basic tests',
      'description' => 'Test basic pathauto functionality.',
      'group' => 'Pathauto',
    );
  }

  /**
   * Basic functional testing of Pathauto.
   */
  function testNodeEditing() {
    // Create node for testing.
    $random_title = $this->randomName(10);
    $title = ' Simpletest title ' . $random_title . ' [';
    $automatic_alias = 'content/simpletest-title-' . strtolower($random_title);
    $node = $this->drupalCreateNode(array('title' => $title, 'type' => 'page'));

    // Look for alias generated in the form.
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertFieldChecked('edit-path-pathauto-perform-alias');
    $this->assertFieldByName('path[alias]', $automatic_alias, 'Proper automated alias generated.');

    // Check whether the alias actually works.
    $this->drupalGet($automatic_alias);
    $this->assertText($title, 'Node accessible through automatic alias.');

    // Manually set the node's alias.
    $manual_alias = 'content/' . $node->nid;
    $edit = array(
      'path[pathauto_perform_alias]' => FALSE,
      'path[alias]' => $manual_alias,
    );
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    $this->assertText(t('@type @title has been updated', array('@type' => 'Basic page', '@title' => $title)));

    // Check that the automatic alias checkbox is now unchecked by default.
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertNoFieldChecked('edit-path-pathauto-perform-alias');
    $this->assertFieldByName('path[alias]', $manual_alias);

    // Submit the node form with the default values.
    $this->drupalPost(NULL, array(), t('Save'));
    $this->assertText(t('@type @title has been updated', array('@type' => 'Basic page', '@title' => $title)));

    // Test that the old (automatic) alias has been deleted and only accessible
    // through the new (manual) alias.
    $this->drupalGet($automatic_alias);
    $this->assertResponse(404, 'Node not accessible through automatic alias.');
    $this->drupalGet($manual_alias);
    $this->assertText($title, 'Node accessible through manual alias.');
  }

  /**
   * Test node operations.
   */
  function testNodeOperations() {
    $node1 = $this->drupalCreateNode(array('title' => 'node1'));
    $node2 = $this->drupalCreateNode(array('title' => 'node2'));

    // Delete all current URL aliases.
    db_delete('url_alias')->execute();

    $edit = array(
      'operation' => 'pathauto_update_alias',
      "nodes[{$node1->nid}]" => TRUE,
    );
    $this->drupalPost('admin/content', $edit, t('Update'));
    $this->assertText('Updated URL alias for 1 node.');

    $this->assertEntityAlias('node', $node1, 'content/' . $node1->title);
    $this->assertEntityAlias('node', $node2, 'node/' . $node2->nid);
  }

  /**
   * Test user operations.
   */
  function testUserOperations() {
    $account = $this->drupalCreateUser();

    // Delete all current URL aliases.
    db_delete('url_alias')->execute();

    $edit = array(
      'operation' => 'pathauto_update_alias',
      "accounts[{$account->uid}]" => TRUE,
    );
    $this->drupalPost('admin/people', $edit, t('Update'));
    $this->assertText('Updated URL alias for 1 user account.');

    $this->assertEntityAlias('user', $account, 'users/' . drupal_strtolower($account->name));
    $this->assertEntityAlias('user', $this->admin_user, 'user/' . $this->admin_user->uid);
  }

  function testSettingsValidation() {
    $edit = array();
    $edit['pathauto_max_length'] = 'abc';
    $edit['pathauto_max_component_length'] = 'abc';
    $this->drupalPost('admin/config/search/path/settings', $edit, 'Save configuration');
    $this->assertText('The field Maximum alias length is not a valid number.');
    $this->assertText('The field Maximum component length is not a valid number.');
    $this->assertNoText('The configuration options have been saved.');

    $edit['pathauto_max_length'] = '0';
    $edit['pathauto_max_component_length'] = '0';
    $this->drupalPost('admin/config/search/path/settings', $edit, 'Save configuration');
    $this->assertText('The field Maximum alias length cannot be less than 1.');
    $this->assertText('The field Maximum component length cannot be less than 1.');
    $this->assertNoText('The configuration options have been saved.');

    $edit['pathauto_max_length'] = '999';
    $edit['pathauto_max_component_length'] = '999';
    $this->drupalPost('admin/config/search/path/settings', $edit, 'Save configuration');
    $this->assertText('The field Maximum alias length cannot be greater than 255.');
    $this->assertText('The field Maximum component length cannot be greater than 255.');
    $this->assertNoText('The configuration options have been saved.');

    $edit['pathauto_max_length'] = '50';
    $edit['pathauto_max_component_length'] = '50';
    $this->drupalPost('admin/config/search/path/settings', $edit, 'Save configuration');
    $this->assertText('The configuration options have been saved.');
  }

  function testPatternsValidation() {
    $edit = array();
    $edit['pathauto_node_pattern'] = '[node:title]/[user:name]/[term:name]';
    $this->drupalPost('admin/config/search/path/patterns', $edit, 'Save configuration');
    $this->assertText('The Default path pattern (applies to all node types with blank patterns below) is using the following invalid tokens: [user:name], [term:name].');
    $this->assertNoText('The configuration options have been saved.');
  }
}

class PathautoLocaleTestCase extends PathautoTestHelper {
  public static function getInfo() {
    return array(
      'name' => 'Pathauto localization tests',
      'description' => 'Test pathauto functionality with localization and translation.',
      'group' => 'Pathauto',
    );
  }

  function setUp() {
    parent::setUp(array('locale', 'translation'), array('administer languages'));

    // Add predefined French language and reset the locale cache.
    require_once DRUPAL_ROOT . '/includes/locale.inc';
    locale_add_language('fr', NULL, NULL, LANGUAGE_LTR, '', 'fr');
    drupal_language_initialize();
  }

  /**
   * Test that when an English node is updated, its old English alias is
   * updated and its newer French alias is left intact.
   */
  function testLanguageAliases() {
    $node = array(
      'title' => 'English node',
      'language' => 'en',
      'body' => array('en' => array(array())),
      'path' => array(
        'alias' => 'english-node',
        'pathauto_perform_alias' => FALSE,
      ),
    );
    $node = $this->drupalCreateNode($node);
    $english_alias = path_load(array('alias' => 'english-node'));

    // Also save a French alias that should not be left alone, even though
    // it is the newer alias.
    $this->saveEntityAlias('node', $node, 'french-node', 'fr');

    // Update the node, triggering a change in the English alias.
    $node = node_load($node->nid);
    node_save($node);

    // Check that the new English alias replaced the old one.
    $this->assertEntityAlias('node', $node, 'content/english-node', 'en');
    $this->assertEntityAlias('node', $node, 'french-node', 'fr');
    $this->assertAliasExists(array('pid' => $english_alias['pid'], 'alias' => 'content/english-node'));
  }
}
