<?php
/* $Id$ */

function pathauto_help($section = 'admin/modules#description') {
  switch ($section) {
    case 'admin/modules#description':
      $output = t('Automatically creates aliases from node titles');
      break;
  }

  return $output;
}

/**
 * Implementation of hook_nodeapi().
 */
function pathauto_nodeapi(&$node, $op, $teaser, $page) {
  if (module_exist('path')) {
    switch ($op) {
      case 'insert':
      case 'update':
        /*
        ** If there's no explicit alias and there is a title, use the
        ** title to automatically create an alias
        */
        _pathauto_generate_alias($node);
        break;
      case 'form pre':
        /*
        ** A helpful hint to the user. Because hook_nodeapi() is
        ** called in alphabetical order of module name, this will
        ** almost certainly appear immediately after the path alias field 
        */
        if (user_access('create url aliases')) {
          $output = t('If the <b>Path alias</b> is left blank, an alias '.
            'will be automatically generated from the title.');
          if (user_access('administer pathauto')) {
            $output .= t(' To control the format of the generated alias, '.
              'see the <a href="admin/settings/pathauto">pathauto settings</a>.');
          }
          return $output;
        }
        break;
      default:
        break;
    }
  }
}

function pathauto_perm() {
  return array('administer pathauto'); 
}

function pathauto_settings() {
  $output = '';
  $items = '';
  
  // Restrict administration of this module
  if (!user_access('administer pathauto')) {
    return message_access();
  }
  
  if (!module_exist('path')) {
    $output .= t('<p>The pathauto module is an extension of the <b>path</b> '.
      'module - you must enable <b>path</b> to use it.</p>');
    return $output;
  }
  
  // Did they ask for a bulk update?
  if (variable_get('pathauto_bulkupdate', FALSE)) {
    _pathauto_bulkupdate();
  }

  if (variable_get('pathauto_cat_bulkupdate', FALSE)) {
    _pathauto_cat_bulkupdate();
  }

  // Generate the form
  // %%% NOTE: should validate separator as legal URI character
  $items .= form_textfield(t('Separator'), 'pathauto_separator',  
    variable_get('pathauto_separator', '_'), 1, 1,
    t('Character used to separate words in titles.'), '', FALSE);

  $items .= form_checkbox(t('Create feed aliases'), 'pathauto_applytofeed', 1,
    variable_get('pathauto_applytofeed', FALSE), t('Also generate aliases for RSS feeds.'));

  $output .= form_group(t('General settings'), $items, t(''));
  
  $items = '';
  $items .= form_textfield('Default path pattern (applies to all types with blank patterns below)',
                           'pathauto_pattern',
                           variable_get('pathauto_pattern','[title]'),
                           65,
                           128,
                           NULL,
                           NULL,
                           FALSE);

  $nodetypes = node_list();
  foreach ($nodetypes as $ntype) {
    if (module_exist('flexinode') and !strncasecmp($ntype, 'flexinode-', 10)) {
       $ntype = flexinode_node_name($ntype);
    }     

    $items .= form_textfield('Pattern for all '.$ntype.' paths',
                             $ntype.'_pathauto_pattern',
                             variable_get($ntype.'_pathauto_pattern',''),
                             65,
                             128,
                             '',
                             NULL,
                             FALSE);
  }

  $description = 'Write the paths as you want them, using the placeholders listed below:';
  $description .= '<dl>';
  $description .= '<dt>'.'[title]'.'</dt>';
  $description .= '<dd>'.t('The title of the page, with spaces and punctuation replaced by the chosen separator').'</dd>';
  $description .= '<dt>'.'[nid]'.'</dt>';
  $description .= '<dd>'.t('The id number of the node.</dd>');
  $description .= '<dt>'.'[user]'.'</dt>';
  $description .= '<dd>'.t('The name of the user who created the node.</dd>');
  if (module_exist('taxonomy')) {
    $vocabularies = taxonomy_get_vocabularies();
    if (sizeof($vocabularies) > 0) {
        $description .= '<dt>'.'[vocab]'.'</dt>';
        $description .= '<dd>'.t("The vocabulary that the page's first category belongs to.");
        $description .= '<dt>'.'[cat]'.'</dt>';
        $description .= '<dd>'.t('The name of the first category that the page belongs to.');
        $description .= '<dt>'.'[catalias]'.'</dt>';
      	$description .= '<dd>'.t('The alias for the first category that the page belongs to. '.
	        'This is useful for long category names.  You must set up the url alias for the '.
          'category first.');
        $description .= '<dt>'.'[catpath]'.'</dt>';
        $description .= '<dd>'.t('As [cat], but including its supercategories.').'</dd>';
    }
  }
  $description .= '<dt>'.'[type]'.'</dt>';
  $description .= '<dd>'.t('The node type (e.g., "page", "story", etc.).</dd>');
  if (module_exist('book')) {
    $description .= '<dt>'.'[book]'.'</dt>';
    $description .= '<dd>'.t('For book pages, the title of the top-level book.</dd>');
  }
  $description .= '<dt>'.'[yyyy]'.'</dt>';
  $description .= '<dd>'.t('The year the node was created.</dd>');
  $description .= '<dt>'.'[mm]'.'</dt>';
  $description .= '<dd>'.t('The two-digit month (01-12) the node was created.').'</dd>';
  $description .= '<dt>'.'[mon]'.'</dt>';
  $description .= '<dd>'.t('The three-letter month (jan-dec) the node was created.').'</dd>';
  $description .= '<dt>'.'[dd]'.'</dt>';
  $description .= '<dd>'.t('The two-digit day of the month (00-31) that the node was created.').'</dd>';
  $description .= '<dt>'.'[day]'.'</dt>';
  $description .= '<dd>'.t('The three-letter day of the week (sun-sat) that the node was created.').'</dd>';
  $description .= '<dt>'.'[hour]'.'</dt>';
  $description .= '<dd>'.t('The two-digit hour (00-23) the node was created.').'</dd>';
  $description .= '<dt>'.'[min]'.'</dt>';
  $description .= '<dd>'.t('The two-digit minute (00-59) the node was created.').'</dd>';
  $description .= '<dt>'.'[sec]'.'</dt>';
  $description .= '<dd>'.t('The two-digit second (00-59) the node was created.').'</dd>';
  $description .= '<dt>'.'[week]'.'</dt>';
  $description .= '<dd>'.t('The week number (1-52) of the year the node was created.').'</dd>';                        
  $description .= '</dl>';

  $description .= t('<b>Examples:</b>'.
        '<p>The following examples of aliases generated from various patterns are all based on a node titled '.
        '"This is a (sample) node", created on February 6, 2005, '.
        'with a category of Sports, which is a subcategory of News, in the '.
        'vocabulary Topics.</p>'.
        '<dl><dt>Separator=<b>_</b>, Pattern=<b>[title]</b></dt>'.
        '   <dd>this_is_a_sample_node</dd>'.
        '<dl><dt>Separator=<b>-</b>, Pattern=<b>content/[vocab]/[catpath]/[title]</b></dt>'.
        '   <dd>content/topics/news/sports/this-is-a-sample-node</dd>'.
        '<dl><dt>Separator=<b>/</b>, Pattern=<b>[cat]/[yyyy]/[mm]/[dd]/[title]</b></dt>'.
        '   <dd>sports/2005/02/06/this/is/a/sample/node</dd>'.
        '</dl>'
      );

  $output .= form_group(t('Node path settings'), $items, $description);

  if (module_exist('taxonomy')) {
//    $vocabularies = taxonomy_get_vocabularies();
    if (sizeof($vocabularies) > 0) {
      $items  = '';
      $items .= form_textfield('Default path pattern (applies to all vocabularies with blank patterns below)',
                               'pathauto_cat_pattern',
                               variable_get('pathauto_cat_pattern','[vocab]/[catpath]'),
                               65,
                               128,
                               NULL,
                               NULL,
                               FALSE);

      foreach ($vocabularies as $vocab) {
        $items .= form_textfield('Pattern for all '.$vocab->name.' paths',
                                 $vocab->name.'_pathauto_cat_pattern',
                                 variable_get($vocab->name.'_pathauto_cat_pattern',''),
                                 65,
                                 128,
                                 '',
                                 NULL,
                                 FALSE);
      }

      $description  = '';
      $description .= '<dt>'.'[vocab]'.'</dt>';
      $description .= '<dd>'.t("The vocabulary that the page's first category belongs to.");
      $description .= '<dt>'.'[cat]'.'</dt>';
      $description .= '<dd>'.t('The name of the category.');
      $description .= '<dt>'.'[catpath]'.'</dt>';
      $description .= '<dd>'.t('As [cat], but including its supercategories.').'</dd>';
      $description .= '<dt>'.'[tid]'.'</dt>';
      $description .= '<dd>'.t('The id number of the category.</dd>');
     
      $output .= form_group(t('Category path settings'), $items, $description);
    }
  }

  // %%% Should only show when there are unaliased nodes
  $items = '';
  $items .= form_checkbox(t('Bulk update node paths'), 'pathauto_bulkupdate', 1, FALSE, 
    t('Generate aliases for all existing nodes which do not already have aliases.'));
  variable_set('pathauto_bulkupdate', FALSE);

  if (module_exist('taxonomy')) {
//    $vocabularies = taxonomy_get_vocabularies();
    if (sizeof($vocabularies) > 0) {
      $items .= form_checkbox(t('Bulk update category paths'), 'pathauto_cat_bulkupdate', 1, FALSE,
        t('Generate aliases for all existing categories which do not already have aliases.'));
      variable_set('pathauto_cat_bulkupdate', FALSE);
    }
  }
  $output .= form_group(t('Actions'), $items, t(''));
  
  return $output;
}

// Make sure there isn't already an alias pointing to a different node
function _pathauto_alias_exists($alias, $src) {
  return db_result(db_query(
    "SELECT COUNT(dst) FROM {url_alias} WHERE dst = '%s' AND src != '%s'", 
    $alias, $src));
}

// Generate an alias from a node's title
function _pathauto_generate_alias($node, $bulk=FALSE) {
  if ($node->title && !$node->path) {
    $separator = variable_get('pathauto_separator', '_');
    
    // First transform the title
    $title = _pathauto_cleanstring($node->title, $separator);
    
    // Now get all the placeholder data
    $placeholders = array();
    $placeholders['[title]'] = $title;

    // Date & time info
    $placeholders['[yyyy]'] = date('Y', $node->created);
    $placeholders['[mm]'] = date('m', $node->created);
    $placeholders['[mon]'] = strtolower(date('M', $node->created));
    $placeholders['[dd]'] = date('d', $node->created);
    $placeholders['[day]'] = strtolower(date('D', $node->created));
    $placeholders['[hour]'] = date('H', $node->created);
    $placeholders['[min]'] = date('i', $node->created);
    $placeholders['[sec]']  = date('s', $node->created);
    $placeholders['[week]'] = date('W', $node->created);

    // Node Id info
    $placeholders['[nid]'] = $node->nid;

    // User name info
    $result = db_query("SELECT name FROM {users} WHERE uid = '%u'", $node->uid);
    $userinfo = db_fetch_object($result);
    $placeholders['[user]'] = _pathauto_cleanstring($userinfo->name, $separator);  

    // Category info
    if (module_exist('taxonomy')) {
      $firsttermid = $node->taxonomy[0];
      $term = taxonomy_get_term($firsttermid);
      $placeholders['[cat]'] = _pathauto_cleanstring($term->name, $separator);
      
      $catpath = '';
      $parents = taxonomy_get_parents_all($firsttermid);
      foreach ($parents as $parent) {
        $catpath = _pathauto_cleanstring($parent->name, $separator) . '/' . $catpath;
      }
      $placeholders['[catpath]'] = $catpath;
      
      $vid = $term->vid;
      $vocabulary = taxonomy_get_vocabulary($vid);
      $placeholders['[vocab]'] = _pathauto_cleanstring($vocabulary->name, $separator);
      $placeholders['[catalias]'] = drupal_get_path_alias('taxonomy/term/' . $node->taxonomy[0]);
      if (!strncasecmp($placeholders['[catalias]'], 'taxonomy', 8)) {
        $placeholders['[catalias]'] = $placeholders['[cat]'];
      }
    } else {
      $placeholders['[cat]'] = '';
      $placeholders['[catpath]'] = '';
      $placeholders['[vocab]'] = '';
    }
    
    // Node type info
    if (module_exist('flexinode') and !strncasecmp($node->type, 'flexinode-', 10)) {
      $placeholders['[type]'] = _pathauto_cleanstring(flexinode_node_name($node->type), $separator);
    } else {
      $placeholders['[type]'] = $node->type;    
    }
    
    // Book title
    if (module_exist('book') and $node->type == 'book') {
      $nodebook = book_load($node);
      $path = book_location($nodebook);
      $placeholders['[book]'] = _pathauto_cleanstring($path[0]->title, $separator);
    } else {
      $placeholders['[book]'] = '';
    }
    
    // Retrieve and apply the pattern
    $pattern = strtolower(variable_get($placeholders['[type]'].'_pathauto_pattern', ''));
    if (!trim($pattern)) {
      $pattern = strtolower(variable_get('pathauto_pattern', '[title]'));
    }
    $alias = str_replace(array_keys($placeholders), $placeholders, $pattern);
    $alias = strtolower($alias);
    // Two or more slashes should be collapsed into one
    $alias = preg_replace("/\/+/", "/", $alias);
    // Trim any leading or trailing slashes
    $alias = preg_replace("/^\/|\/+$/", "", $alias);

    $src = "node/$node->nid";
    // If the alias already exists, generate a new variant
    if (_pathauto_alias_exists($alias, $src)) {
      for ($i=0; _pathauto_alias_exists($alias.$separator.$i, $src); $i++) {
      }
      $alias = $alias.$separator.$i;
    }
    path_set_alias($src, $alias);
    if (!$bulk) {
      drupal_set_message("pathauto: Alias <em>$alias</em> created for path <em>$src</em>");
    }
    if (variable_get('pathauto_applytofeed', FALSE)) {
      path_set_alias("$src/feed", "$alias/feed");
      if (!$bulk) {
        drupal_set_message("pathauto: Alias <em>$alias/feed</em> created for path <em>$src/feed</em>");
      }
    }
    return TRUE;
  }
  return FALSE;
}

function _pathauto_cleanstring($string, $separator) {
  // Drop apostrophes
  $output = str_replace("'", "", $string);
  // Convert accented characters to their ASCII counterparts...
  $output = strtr($output,
       "\xA1\xAA\xBA\xBF".
       "\xC0\xC1\xC2\xC3\xC5\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF".
       "\xD0\xD1\xD2\xD3\xD4\xD5\xD8\xD9\xDA\xDB\xDD".
       "\xE0\xE1\xE2\xE3\xE5\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF".
       "\xF0\xF1\xF2\xF3\xF4\xF5\xF8\xF9\xFA\xFB\xFD\xFF",
       "!ao?AAAAACEEEEIIIIDNOOOOOUUUYaaaaaceeeeiiiidnooooouuuyy"); 
  // ...and ligatures too
  $output = strtr($output, array("\xC4"=>"Ae", "\xC6"=>"AE", "\xD6"=>"Oe", 
    "\xDC"=>"Ue", "\xDE"=>"TH", "\xDF"=>"ss", "\xE4"=>"ae", "\xE6"=>"ae", 
    "\xF6"=>"oe", "\xFC"=>"ue", "\xFE"=>"th"));
  // Any sequence of one or more non-alphanumerics
  // should become a separator
  $output = preg_replace('/[\W]+/ ', $separator, $output);
  // Trim any leading or trailing separators (note the need to
  // escape the separator if and only if it is not alphanumeric)
  if (ctype_alnum($separator)) {
    $seppattern = $separator;
  } else {
    $seppattern = '\\'.$separator;
  }
  $output = preg_replace("/^$seppattern+|$seppattern+$/", "", $output);
  return $output;
}

/**
 * Implementation of hook_taxonomy().
 */
function pathauto_taxonomy($op, $type, $object) {
  switch ($type) {
    case 'term':
      switch ($op) {
        case 'insert':
          /*
          ** Use the category name to automatically create an alias
          */
          _pathauto_generate_cat_alias($object);
           break;
        case 'delete':
          /*
      	  ** If the category is deleted, remove the path aliases
      	  **
          */
	        _pathauto_remove_cat_alias($object);
          break;
        case 'update':
          /*
          ** Do not automatically update the alias on a term change
          */
          break;
        default:
          break;
      }
      break;
    default:
      break;
  }
}

// Generate an alias from a category's name
function _pathauto_generate_cat_alias($term, $bulk=FALSE) {
  $category = array2object($term); 

  if ($category->name) {
    $separator = variable_get('pathauto_separator', '_');

    // First transform the title
    $catname = _pathauto_cleanstring($category->name, $separator);

    // Now get all the placeholder data
    $placeholders = array();
    $placeholders['[cat]'] = $catname;

    if ($category->parent) {
      $catpath = $catname;
      $parents = taxonomy_get_parents_all($category->parent);
    } else {
      $catpath = '';
      $parents = taxonomy_get_parents_all($category->tid);
    }
    
    foreach ($parents as $parent) {
      $catpath = _pathauto_cleanstring($parent->name, $separator) . '/' . $catpath;
    }
    $placeholders['[catpath]'] = $catpath;

    $vid = $category->vid;
    $vocabulary = taxonomy_get_vocabulary($vid);
    $placeholders['[vocab]'] = _pathauto_cleanstring($vocabulary->name, $separator);

    $placeholders['[tid]'] = $category->tid;

    // Retrieve and apply the pattern
    $pattern = strtolower(variable_get($placeholders['[vocab]'].'_pathauto_cat_pattern', ''));
    if (!trim($pattern)) {
      $pattern = strtolower(variable_get('pathauto_cat_pattern', '[vocab]/[catpath]'));
    }
    $alias = str_replace(array_keys($placeholders), $placeholders, $pattern);
    $alias = strtolower($alias);
    // Two or more slashes should be collapsed into one
    $alias = preg_replace("/\/+/", "/", $alias);
    // Trim any leading or trailing slashes
    $alias = preg_replace("/^\/|\/+$/", "", $alias);

    $src = "taxonomy/term/".$category->tid;
    // If the alias already exists, generate a new variant
    if (_pathauto_alias_exists($alias, $src)) {
      for ($i=0; _pathauto_alias_exists($alias.$separator.$i, $src); $i++) {
      }
      $alias = $alias.$separator.$i;
    }
    path_set_alias($src, $alias);
    if (!$bulk) {
      drupal_set_message("pathauto: Alias <em>$alias</em> created for path <em>$src</em>");
    }
    if (variable_get('pathauto_applytofeed', FALSE)) {
      path_set_alias("$src/feed", "$alias/feed");
      if (!$bulk) {
        drupal_set_message("pathauto: Alias <em>$alias/feed</em> created for path <em>$src/feed</em>");
      }
    }
    return TRUE;
  }
  return FALSE;
}

// Remove aliases when a category is deleted
function _pathauto_remove_cat_alias($term) {
  $category = array2object($term);

  db_query("DELETE FROM {url_alias} WHERE src = CONCAT('taxonomy/term/', %d)", $category->tid);
  if (variable_get('pathauto_applytofeed', FALSE)) {
    db_query("DELETE FROM {url_alias} WHERE src =  CONCAT('taxonomy/term/', %d, '/feed')", $category->tid);
  }
}

// Generate aliases for all nodes without aliases
function _pathauto_bulkupdate() {
  $query = 'SELECT nid,type,title,uid,created,src,dst FROM {node} '.
    "LEFT JOIN {url_alias} ON CONCAT('node/', nid) = src ".
    'WHERE dst is null';
  $result = db_query($query);
  $node = db_fetch_object($result);
  if (!$node) {
    drupal_set_message('No unaliased nodes to update.');
    return;
  }

  $count = 0;
  while ($node) {
    if (module_exist('taxonomy')) {
      // Must populate the terms for the node here for the 
      // category placeholders to work
      $node->taxonomy = array_keys(taxonomy_node_get_terms($node->nid));
    }
    if (_pathauto_generate_alias($node, TRUE)) {
      $count++;
    }
    $node = db_fetch_object($result);
  }
  
  drupal_set_message("Bulk update of nodes completed, $count aliases generated.");
}

// Generate aliases for all categories without aliases
function _pathauto_cat_bulkupdate() {
  $query = 'SELECT tid,vid,name,src,dst FROM {term_data} '.
    "LEFT JOIN {url_alias} ON CONCAT('taxonomy/term/', tid) = src ".
    'WHERE dst is null';
  $result = db_query($query);
  $category = db_fetch_object($result);
  if (!$category) {
    drupal_set_message('No unaliased catagories to update.');
    return;
  }

  $count = 0;
  while ($category) {
    if (_pathauto_generate_cat_alias($category, TRUE)) {
      $count++;
    }
    $category = db_fetch_object($result);
  }
  
  drupal_set_message("Bulk update of terms completed, $count aliases generated.");
}

?>
